source /usr/local/ezmn/assets/source.ezs ;
daemon_start(){
	if [ -z "$(ls -A /root/ezmn/installed/ )" ] ; then
		echo "$fgYellow $txBold No crypto is installed, Please install crypto before start daemon ! $txReset" 
		return ;
	else 
		echo -e "$fgBlue Please select the cryptos you want to start daemon or [Q]uit $txReset"
		list_ins=$(ls -1 /root/ezmn/installed/ )
		select CODE_NAME in $list_ins; do
		if  [ -f /root/ezmn/running/${CODE_NAME}.pid ]; then
			echo "$fgYellow $txBold $CRYPTO_NAME daemon already running! $txReset"
			read -r -p " $fgGreen Do you want to stop the $CRYPTO_NAME daemon? ? [y/N] $txReset" confirm
			    case "$confirm" in
			        [yY][eE][sS]|[yY])
			            s_crypto
			            ${DAEMON_STOP}
			            return
			            ;;
			        *)
			            exit
			            ;;
			    esac						 
		elif  [ "$CODE_NAME" == "q" ]  || [ "$CODE_NAME" == "Q" ]; then
			return ;
		else
			if  [ -n "$CODE_NAME" ] ; then
				s_input
				s_crypto
				${DAEMON_START}
				return
			else
				wrong_key 
				return ;
			fi
		fi
		done
	fi
	}

daemon_stop(){
		echo -e "$fgBlue Please select the cryptos you want to stop daemon or [Q]uit $txReset"
		list_ins=$(ls -1 /root/ezmn/running/$CODE_NAME.pid | sed -e 's/\.pid$//' )
		select CODE_NAME in $list_ins; do
			if [ -n "$CODE_NAME" ]; then
			s_crypto
			${DAEMON_STOP}
			return			
		else [ "$CODE_NAME" == "q" ] ;
			exit 0 ;
		fi
		done 
 }

masternode_start(){
	if [ -z "$(ls -A /root/ezmn/running/ | sed -e 's/\.pid$//'  )" ] ; then
		echo "$fgYellow $txBold No crypto is installed, Please install crypto before start daemon ! $txReset" 
		return ;
	else 
		echo -e "$fgBlue Please select the cryptos you want to start daemon or [Q]uit $txReset"
		list_ins=$(ls -1 /root/ezmn/running/ | sed -e 's/\.pid$//' )
		select CODE_NAME in $list_ins; do
			if [ "$CODE_NAME" == "q" ]  || [ "$CODE_NAME" == "Q" ]; then
				exit ;
			else
				if  [ -n "$CODE_NAME" ] ; then
					s_input
					s_crypto
					input_walletpassphrase
					${MN_START} $walletpassphrase
					return
				else
					wrong_key 
					return ;
				fi
			fi
		done
	fi
	}

masternode_status(){
	if [ -z "$(ls -A /root/ezmn/running/ | sed -e 's/\.pid$//' )" ] ; then
		echo -e "$fgYellow $txBold Deamon not already running ! $txReset "
		return ;
	else 
		echo -e "$fgBlue Please select the cryptos you want check masternode status or [Q]uit $txReset"
		list_ins=$(ls -1 /root/ezmn/running/ | sed -e 's/\.pid$//' )
		select CODE_NAME in $list_ins; do
			if [ "$CODE_NAME" == "q" ] || [ "$CODE_NAME" == "Q" ] ; then
				exit ;
			else
				if  [ -n "$CODE_NAME" ] ; then					
					s_crypto					
					${MN_STATUS}
					return ;
				else
					wrong_key 
					return ;
				fi
			fi
		done
	fi
 }
 masternode_debug(){
 	if [ -z "$(ls -A /root/ezmn/running/ | sed -e 's/\.pid$//' )" ] ; then
		echo -e "$fgYellow $txBold Deamon not already running ! $txReset "
		return ;
	else 
		echo -e "$fgBlue Please select the cryptos you want debug or [Q]uit $txReset"
		list_ins=$(ls -1 /root/ezmn/running/ | sed -e 's/\.pid$//' )
		select CODE_NAME in $list_ins; do
			if [ "$CODE_NAME" == "q" ]  || [ "$CODE_NAME" == "Q" ]; then
				exit 0 ;
			else
				if  [ -n "$CODE_NAME" ] ; then					
					s_crypto					
					${MN_DEBUG} 
					return
				else
					wrong_key 
					return ;
				fi
			fi
		done
	fi
 }

auto_masternode(){
	s_input
	daemon_start
	input_walletpassphrase
	sleep 30	
	s_crypto
	${MN_START} $walletpassphrase
	sleep 30
	echo "$fgBlue $txBold MASTERNODE DEBUG $txReset"
	${MN_STATUS}
	echo "$fgBlue $txBold MASTERNODE DEBUG $txReset"
	${MN_DEBUG}		
 }

### DISPLAY ###
display_masternode_menu(){
	echo $txBold
	tput cup 9 0 && tput ed
	tput cup 9 0
	cat << _main_menu
 1) AUTO MASTERNODE ( next update)
 2) DAEMON START
 3) MASTERNODE START
 4) MASTERNODE STATUS
 5) MASTERNODE DEBUG
 9) BACK
 0) EXIT
_main_menu
echo $txReset
 }

### ACTION ###

function action_masternode_menu(){
		local choice
	    read -p "$fgGreen $txBold Enter choice [1-6] or [Q]uit : $txReset" choice
			case $choice in
				1)  auto_masternode ;;
				2)  daemon_start ;;
				3)  masternode_start;;
				4)  masternode_status ;;
				5)  masternode_debug ;;
				9) 	return ;;
			 [0qQ])  exit 0 ;;
		      *)	wrong_key ;;
			 esac			 			
	}